import Mathlib
import LeanW26.Categories.Category
import LeanW26.Categories.BinaryProduct

namespace LeanW26

open CategoryTheory


/-
Category Theory: Exponentials
===

<img src="https://docs.google.com/drawings/d/e/2PACX-1vRE5Mmfx10f5A0c9oc94fXmYx0f5sEf4U-wh0c_esWBV02gyE0rMPcf1BBaZ5aoARFXBpSNp-S2uWh1/pub?w=1440&amp;h=1080" width=60%>

The Exponential Object Z^Y in many cases can be thought of all functions from
Y into Z. We need an evaluation function

```lean
  eval : Z^Y √ó Y ‚Üí Z
```
and a univeral property, which states that for any X and morphism
g : X √ó Y ‚Üí Z there is a unique morphism Œªg : X ‚Üí Z^Y so that (Œªg √ó (ùüô Y)) ‚â´ eval = g.



Currying
===

Currying (after the logician Haskell Curry, 1900-1982) is a way to take a function of two
arguments and combine it into two functions of one argument.

For example suppose `f = fun x y => x+y`. Then `f x = fun y => x+y`.

Currying in a Category
===

<img src="https://docs.google.com/drawings/d/e/2PACX-1vRE5Mmfx10f5A0c9oc94fXmYx0f5sEf4U-wh0c_esWBV02gyE0rMPcf1BBaZ5aoARFXBpSNp-S2uWh1/pub?w=1440&amp;h=1080" width=60%>

We define `curry` to have type:

```lean
curry : (X √ó Y ‚ü∂ Z) ‚Üí (X ‚ü∂ Z^Y)
```

So

```lean
curry g : X ‚ü∂ Z^Y            and            Œªg = curry g √ó ùüô Y
```



HasExp
===

Here's the implementation
-/

open HasProduct in
class HasExp.{u,v} (C : Type u) [Category.{v} C] [HasProduct.{u} C] where

  exp : C ‚Üí C ‚Üí C
  eval {Z Y : C} : (prod (exp Z Y) Y) ‚ü∂ Z
  curry {X Y Z : C} (g : (prod X Y) ‚ü∂ Z) : X ‚ü∂ (exp Z Y)

  curry_eval {X Y Z : C} (g : prod X Y ‚ü∂ Z)
    : prod_map (curry g) (ùüô Y) ‚â´ eval = g

  curry_unique {X Y Z : C} (g : X ‚ü∂ exp Z Y) (h : prod X Y ‚ü∂ Z)
    (comm : prod_map g (ùüô Y) ‚â´ eval = h)
    : curry h = g


/-
Notation Class Instances
===
-/

instance HasExp.inst_hpow.{u, v} {C : Type u} [Category.{v} C]
         [HasProduct.{u} C] [HasExp.{u, v} C]
  : HPow C C C where
  hPow := exp

instance HasExp.inst_pow.{u, v} {C : Type u} [Category.{v} C]
         [HasProduct.{u} C] [HasExp.{u, v} C] : Pow C C where
  pow := exp

/- Now we can write: -/


namespace Temp

variable (C : Type*) [Category C] [HasProduct C] [HasExp C] (X Y Z : C)
#check (X^Y)*Z

end Temp


/-
Reflexive Graphs: A Subcategory of Graphs
===

To show an example of exponentials, we can't use simple graphs, as we need self-loops (Why?)
We can build a subcategory of Graph called ReflexiveGraph that does this using
Mathlib's `FullSubcategory` helper. -/


def ReflexiveGraph.{u} : Type (u+1) :=
  ObjectProperty.FullSubcategory (fun G : Graph.{u} => ‚àÄ v, G.E v v)

--hide
namespace ReflexiveGraph
--unhide

/- We can then show ReflexiveGraph is also a category and that it has products. -/

instance inst_category.{u} : Category ReflexiveGraph.{u} :=
  ObjectProperty.FullSubcategory.category _

/-
Products in Reflexive Graphs
===

For the product instance, it would be nice if there were a way to just use the
fact that Graphs have products. Or at least use some of that proof. But I could not
figure that out so this is mostly just repetetive at this point. -/

--hide
open HasProduct
--unhide

instance inst_has_product.{u} : HasProduct.{u+1} ReflexiveGraph.{u} := {

  prod := fun G H => ‚ü® TensorProd G.1 H.1, fun v => ‚ü® G.property v.1, H.property v.2 ‚ü© ‚ü©,
  œÄ‚ÇÅ := fun {X‚ÇÅ X‚ÇÇ : ReflexiveGraph} => Graph.inst_has_product.œÄ‚ÇÅ,
  œÄ‚ÇÇ := fun {X‚ÇÅ X‚ÇÇ : ReflexiveGraph} => Graph.inst_has_product.œÄ‚ÇÇ,

  pair := fun {X‚ÇÅ X‚ÇÇ Y : ReflexiveGraph} => fun f‚ÇÅ f‚ÇÇ => ‚ü® fun y => ( f‚ÇÅ.f y, f‚ÇÇ.f y ), by
    intro x y h
    exact ‚ü® f‚ÇÅ.pe x y h, f‚ÇÇ.pe x y h ‚ü©
  ‚ü©,

  pair‚ÇÅ := by intros; rfl,

  pair‚ÇÇ := by intros; rfl,

  pair_unique {X‚ÇÅ X‚ÇÇ Y} := by
    intro _ _ _ h1 h2
    simp[‚Üêh1,‚Üêh2]
    rfl

}

/-
Reflexive Graphs Have Exponentials
===

Here's a paper with something like this construction:

  https://arxiv.org/pdf/1807.09345

The exponential G^H is the graph in which the vertices are morphisms from H to G,
and the edges are the "natural transformations". The transformation maps vertices
and edges of G to those of H in a way that commutes.

HasExp Instantiation
===

First we define the exponential object of two Reflexive Graphs. Note the universe
condition. We need to have the exponential object like in a higher universe
otherwise we get Russel's paradox issues.

The vertices of the exponential objects G^H are the morphisms from H to G.

If F‚ÇÅ and F‚ÇÇ are both morphisms from H to G, there is an edge from
F‚ÇÅ to F‚ÇÇ if for all edges x y in H there is an edge from F‚ÇÅ(x) to F‚ÇÇ(x) in G.

-/

def exp.{u} (G H : ReflexiveGraph.{u}) : ReflexiveGraph.{u} := {
  obj := {
    V := ULift.{u} (H ‚ü∂ G),
    E := fun F‚ÇÅ F‚ÇÇ =>
      let ‚ü® f‚ÇÅ, _ ‚ü© := ULift.down F‚ÇÅ -- function underlying first morphism
      let ‚ü® f‚ÇÇ, _ ‚ü© := ULift.down F‚ÇÇ -- function underlying second morphism
      let ‚ü® ‚ü® hV, hE ‚ü©, _ ‚ü© := H     -- vertices and edges of H
      let ‚ü® ‚ü® _, gE ‚ü©, _ ‚ü© := G      -- edges of G
      ‚àÄ x y : hV, hE x y ‚Üí gE (f‚ÇÅ x) (f‚ÇÇ y)
  },
  property := by
    intro morphism u v h
    exact morphism.down.pe u v h
}

/-
The eval Function is straighforward
===
-/

def eval (H G : ReflexiveGraph) : HasProduct.prod (exp H G) G ‚ü∂ H := {
    f := fun ‚ü® ‚ü® f, h ‚ü©, v  ‚ü© => f v,
    pe := by
      intro ‚ü® ‚ü® fg, hfg ‚ü©, vG ‚ü© ‚ü® ‚ü® fh, hfh ‚ü©, fH ‚ü© ‚ü® h1, h2 ‚ü©
      simp_all only[exp]
      exact h1 vG fH h2
}

/-
Instantiating HasExp
===
-/

instance inst_has_exp : HasExp ReflexiveGraph := {

  exp := exp,
  eval := fun {G H} => eval G H,

  curry := fun {X Y Z} => fun ‚ü® f, h ‚ü© => ‚ü® fun x => ‚ü® fun y => f (x,y), by
      intro _ _ e
      apply h
      exact ‚ü® X.property x, e ‚ü©
     ‚ü©, by
        intros _ _ ex _ _ ey
        apply h
        exact ‚ü®ex, ey‚ü©
    ‚ü©

  curry_eval := by intros; rfl,

  curry_unique := by
    intro _ _ _ _ _ comm
    rw[‚Üêcomm]
    rfl

}

/- Hooray! -/

--hide
end ReflexiveGraph
--unhide


/-
Uncurrying
===
-/

def HasExp.uncurry.{u,v} {C : Type u} [Category.{v} C] [HasProduct.{u, v} C] [HasExp.{u, v} C]
  {X Y Z : C} (g : X ‚ü∂ Z ^ Y) : X * Y ‚ü∂ Z := (g * (ùüô Y)) ‚â´ eval

open HasProduct HasExp in
theorem curry_uncurry.{u, v} {C : Type u}
   [Category.{v} C] [HP : HasProduct.{u, v} C] [HE : HasExp.{u, v} C]
   (X Y Z : C) (g : X * Y ‚ü∂ Z)
  : uncurry (curry g) = g := by
    unfold uncurry
    apply curry_eval

/-
An Example Theorem
===
-/

/-
 - prod_map (f‚ÇÅ : Y‚ÇÅ ‚ü∂ X‚ÇÅ) (f‚ÇÇ : Y‚ÇÇ ‚ü∂ X‚ÇÇ) : (prod Y‚ÇÅ Y‚ÇÇ) ‚ü∂ (prod X‚ÇÅ X‚ÇÇ)
 - curry (g : (prod X Y) ‚ü∂ Z) : X ‚ü∂ (exp Z Y)
 - uncurry (g : X ‚ü∂ Z ^ Y) : X * Y ‚ü∂ Z
-/

open HasProduct in
@[simp]
def prod_swap.{u, v} {C : Type u} (X Y : C) [Category.{v} C] [HasProduct.{u, v} C]
   : X * Y ‚ü∂ Y * X := pair œÄ‚ÇÇ œÄ‚ÇÅ


open HasProduct HasExp in
theorem exp_prod.{u, v} (C : Type u) [Category.{v} C] [HasProduct.{u, v} C] [HasExp.{u, v} C]
    (X Y Z : C) : ‚àÉ f : Iso ((X^Y)^Z) (X^(Y*Z)), True := by

    let f1 : (X^Y)^Z ‚ü∂ X^(Y*Z) :=
        curry (pair (prod_map (ùüô ((X ^ Y) ^ Z)) œÄ‚ÇÇ ‚â´ eval) (œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ) ‚â´ eval)

    let f2 : X^(Y*Z) ‚ü∂ (X^Y)^Z :=
        curry (curry (pair (œÄ‚ÇÅ ‚â´ œÄ‚ÇÅ) (pair œÄ‚ÇÇ (œÄ‚ÇÅ ‚â´ œÄ‚ÇÇ)) ‚â´ eval))

    use ‚ü®
      f1,
      f2,
      by
        unfold f1 f2
        simp[prod_map,Category.comp_id]

        sorry,
      by
        unfold f1
        unfold f2

        sorry
    ‚ü©


    -- let f1' : (X^Y)^Z ‚ü∂ X^(Y*Z) :=
    --    let E := (X^Y)^Z
    --    let ev1 : E * Z ‚ü∂ X ^ Y := eval (Z := exp X Y) (Y := Z)
    --    let evXY :  (X^Y) * Y ‚ü∂ X := eval (Z := X) (Y := Y)
    --    let projZ_from_pair : E* (Y * Z) ‚ü∂ E * Z := prod_map (ùüô E) (œÄ‚ÇÇ : Y * Z ‚ü∂ Z)
    --    let to_expX_Y : E * (Y * Z) ‚ü∂ X ^ Y :=  projZ_from_pair ‚â´ ev1
    --    let projY_from_pair : E * (Y * Z) ‚ü∂ Y :=
    --        (œÄ‚ÇÇ : E * (Y * Z) ‚ü∂ Y * Z) ‚â´ (œÄ‚ÇÅ : Y * Z ‚ü∂ Y)
    --    let body : E * (Y * Z) ‚ü∂ X := pair to_expX_Y projY_from_pair ‚â´ evXY
    --    curry body


    -- let f2' : X^(Y*Z) ‚ü∂ (X^Y)^Z :=
    --     let E := X ^ (Y * Z)
    --     let evYZ : E * (Y * Z) ‚ü∂ X := eval (Z := X) (Y := Y * Z)
    --     let projE : (E * Z) * Y ‚ü∂ E := œÄ‚ÇÅ ‚â´ œÄ‚ÇÅ
    --     let projZ : (E * Z) * Y ‚ü∂ Z := œÄ‚ÇÅ ‚â´ œÄ‚ÇÇ
    --     let projY : (E * Z) * Y ‚ü∂ Y :=  œÄ‚ÇÇ
    --     let yz : (E * Z) * Y ‚ü∂ Y * Z := pair projY projZ
    --     let body : (E * Z) * Y ‚ü∂ X := pair (projE) (yz) ‚â´ evYZ
    --     curry (curry body)

--hide
end LeanW26
--unhide
